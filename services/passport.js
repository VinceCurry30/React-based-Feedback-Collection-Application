const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// fetch the user model class out of mongoose
const User = mongoose.model('users');

// first argument: user model instance we just retrieved from database
passport.serializeUser((user, done) => {
  // second argument: _id of this user that was generated by MongoDB
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

// the arrow function will be executed after we get the user profile
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      // asynchronous request returns a promise
      User.findOne({ googleId: profile.id }).then((existingUser) => {
        if (existingUser) {
          // done with find the user, continue with the OAuth flow
          // first argument: error object, second argument: user record
          done(null, existingUser);
        } else {
          // new User create a new model instance, .save() save that to MongoDB
          new User({ googleId: profile.id }).save().then((user) => {
            done(null, user);
          });
        }
      });
    }
  )
);
